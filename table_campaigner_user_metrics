/*This query creates a table with mailer metrics, with a field identifying the campaigner who sent it.
For each mailer, it gives a row for each user who received it and whether they opened, clicked, did an action,
or unsubscribed on that mailer. The resulting table has no duplicate users.

The numbers from this query may be slightly lower than the numbers in ActionKit itself. We suspect this is because Civis
takes awhile to sync.
*/


WITH base AS (
  SELECT
    SUBSTRING(core_tag.name, 6, (LEN(core_tag.name) - 6)) AS campaigner -- Hide for now since campaigners aren't tagging consistently
      -- ^format field to remove 'OWNER' from the beginning 
    , core_mailing.id AS mailing_id
    , TO_DATE(core_mailing.send_date, 'YYYY-MM-DD') AS mailing_date
    , core_usermailing.user_id
    , core_usermailing.id AS unique_id
  FROM coc_ak.core_mailing
  LEFT JOIN coc_ak.core_mailing_tags
    ON core_mailing.id = core_mailing_tags.mailing_id
  LEFT JOIN coc_ak.core_tag
  	ON core_mailing_tags.tag_id = core_tag.id
  LEFT JOIN coc_ak.core_usermailing
    ON core_mailing.id = core_usermailing.mailing_id
  WHERE core_tag.name LIKE 'OWNER%' -- In AK, seeing some campaigners are using the format 'Owner...'. Meaning they will not show up in this table.
    AND core_mailing.expected_send_count > 0
    AND core_usermailing.user_id IS NOT NULL 
      -- ^seeing some mailers that are sent once w/o user id. I'm guessing they're tests
    AND core_mailing.status = 'completed'
    
--   AND mailing_date > '2021-01-01' -- Using to narrow down results for run time
--AND core_mailing.id = '49317' -- Using to check results by specific mailer
)

, opens AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_open.user_id IS NOT NULL THEN 1 ELSE NULL END AS open_flag
    , ROW_NUMBER () OVER (PARTITION BY core_open.user_id, core_open.mailing_id ORDER BY core_open.created_at DESC) AS rank_opens
  FROM base
  INNER JOIN coc_ak.core_open
    ON base.mailing_id = core_open.mailing_id
    AND base.user_id = core_open.user_id
)

, clicks AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_click.user_id IS NOT NULL THEN 1 ELSE NULL END AS click_flag
    , ROW_NUMBER () OVER (PARTITION BY core_click.user_id, core_click.mailing_id  ORDER BY core_click.created_at DESC) AS rank_clicks
  FROM base
  INNER JOIN coc_ak.core_click
    ON base.mailing_id = core_click.mailing_id
    AND base.user_id = core_click.user_id
  LEFT JOIN coc_ak.core_clickurl
    ON core_click.clickurl_id = core_clickurl.id
  WHERE core_clickurl.url NOT LIKE '%unsubscribe%' -- Exclude clicks that were to unsubscribe
)


, actions AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_action.user_id IS NOT NULL THEN 1 ELSE NULL END AS action_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_actions
  FROM base
  INNER JOIN coc_ak.core_action
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  LEFT JOIN coc_ak.core_unsubscribeaction
    ON core_unsubscribeaction.action_ptr_id = core_action.id
  WHERE action_ptr_id IS NULL
    AND core_action.status = 'complete'
)

, unsubs AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN base.user_id IS NOT NULL THEN 1 ELSE NULL END AS unsubscribe_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_unsubs
  FROM base
  INNER JOIN coc_ak.core_action
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  INNER JOIN coc_ak.core_subscriptionhistory AS subhist
    ON subhist.action_id = core_action.id
  INNER JOIN coc_ak.core_subscriptionchangetype AS changes
    ON changes.id = subhist.change_id
   WHERE changes.subscribed = 'f' -- filter to only include subscriptionchangetypes that are for Unsubscribing
)


SELECT
  base.campaigner
  , base.mailing_id
  , base.mailing_date
  , base.user_id
  , opens.open_flag
  , clicks.click_flag
  , actions.action_flag
  , unsubs.unsubscribe_flag
FROM base
LEFT JOIN opens
  ON base.mailing_id = opens.mailing_id
  AND base.user_id = opens.user_id
  AND rank_opens = 1 -- Deduping by user
LEFT JOIN clicks
  ON base.mailing_id = clicks.mailing_id
  AND base.user_id = clicks.user_id
  AND rank_clicks = 1 -- Deduping by user
LEFT JOIN actions
  ON base.mailing_id = actions.mailing_id
  AND base.user_id = actions.user_id
  AND rank_actions = 1 -- Deduping by user
LEFT JOIN unsubs
  ON base.mailing_id = unsubs.mailing_id
  AND base.user_id = unsubs.user_id
  AND rank_unsubs = 1 -- Deduping by user

/* Using to narrow runtime
WHERE mailing_date < '2021-03-01'
ORDER BY base.mailing_date DESC
LIMIT 10000*/