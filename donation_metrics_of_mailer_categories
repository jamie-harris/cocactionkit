/*Key donation metrics of mailer campaign categories since 2018.

Campaign categories were manually assigned here: https://docs.google.com/spreadsheets/d/1FRVhCEXS6M_olUHq1CeR_eAUnJmS0FYtGOO5x8KZfYk/edit?usp=sharing
then imported into the coc_reporting.ak_topdonationmailers_20182020_categories table.

The categories were determined by manually matching the mailer campaign name, subject line, or email body.
Many categories are issues (like Criminal Justice), but also include key themes of the mailer, such as if it featured Black
Mothers or referenced a big news event like Flint, MI.

Only the top 98 mailer's (by dollars donated since 2018) campaign tags were categorized, excluding the several EOY, Giving Tuesday, or 
otherwise solely fundraising based campaigns (all of which had multiple subject line themes).


This query also references this Donations table: https://platform.civisanalytics.com/spa/#/scripts/sql/107820843
Created by Spence. Still being revised as of 18 FEB 2021.
*/


-- This CTE: Bring in relevant fields from the Donations base-table
WITH donations AS (
SELECT DISTINCT
	transaction_id
  , user_id
  , mailing_id
  , gift_date
  , total
-- Below fields needed to be transformed for the ROW NUMBER function to work correctly.
  , CASE WHEN recurring = '0' THEN NULL ELSE recurring END AS recurring_clean
  , CASE WHEN first_donation = '0' THEN NULL ELSE first_donation END AS first_donation_clean
  , CASE WHEN first_one_time_donation = '0' THEN NULL ELSE first_one_time_donation END AS first_one_time_donation_clean
  , CASE WHEN first_recurring_donation = '0' THEN NULL ELSE first_recurring_donation END AS first_recurring_donation_clean
  , CASE WHEN reactivated_former_recurring = '0' THEN NULL ELSE reactivated_former_recurring END AS reactivated_former_recurring_clean
  
  , ROW_NUMBER () OVER (PARTITION BY transaction_id ORDER BY recurring_clean, first_donation_clean, first_one_time_donation_clean, first_recurring_donation_clean, reactivated_former_recurring_clean DESC NULLS LAST) AS transaction_dupe
    -- ^For deduping. I'm seeing that one transaction will have multiple records, one with a flag for these donation types and one without.

FROM coc_reporting.donation_base_20210202
WHERE clean_source = 'email' -- Including donations from emails only
  AND gift_date >= '2018-01-01' -- Capping analysis at 2018 as the start date.
)


-- This CTE: dedup on transaction_id. Join to core_mailing table to bring in relevant fields about mailings.
, donations_clean AS (
SELECT
  transaction_id
  , user_id
  , mailing_id
  , gift_date
  , total
  , recurring_clean AS recurring
  , first_donation_clean AS first_donation
  , first_one_time_donation_clean AS first_onetime_donation
  , first_recurring_donation_clean AS first_recurring_donation
  , reactivated_former_recurring_clean AS reactivated_former_recurring
  , TO_DATE(core_mailing.send_date, 'YYYY-MM-DD') AS mailing_date -- converting field to date data type
  , core_mailing.expected_send_count AS mailing_send_count
FROM donations
LEFT JOIN coc_ak.core_mailing
  ON donations.mailing_id = core_mailing.id
  
WHERE transaction_dupe = 1
  AND core_mailing.status = 'completed'
)


-- This CTE: Bring in table that I made assigning issue tags to mailer campaigns.
, base AS (
SELECT
	donations_clean.*
  , category_tags.*

FROM coc_reporting.ak_topdonationmailers_20182020_categories AS category_tags
  -- ^Starting with this table since it has all the campaign category tags that I want to work with. These campaigns tags are much fewer than the total amount from core_mailing_tags.
LEFT JOIN coc_ak.core_mailing_tags
  ON core_mailing_tags.tag_id = category_tags.tag_id
LEFT JOIN donations_clean
	ON donations_clean.mailing_id = core_mailing_tags.mailing_id
)


/* Code for adding mailer entity is finished. Want input on structure before fully integrating.
, add_entity AS (
SELECT
  tag_categories
  , core_tag.name AS mailer_entity
  , COUNT(core_tag.name) AS count_entity
FROM base
LEFT JOIN coc_ak.core_mailing_tags
  ON core_mailing_tags.mailing_id = base.mailing_id
LEFT JOIN coc_ak.core_tag
  ON core_mailing_tags.tag_id = core_tag.id

WHERE core_tag.name LIKE '[%]' -- Notation for entity tags: PAC, c3, c4
  AND tag_categories IS NOT NULL

GROUP BY 1,2
)


, add_entity2 AS (
SELECT
  add_entity.tag_categories
  , add_entity.mailer_entity
FROM add_entity
JOIN (SELECT add_entity.tag_categories, MAX(add_entity.count_entity) AS max_count_entity
        FROM add_entity
        GROUP BY add_entity.tag_categories) 
      AS subquery
  ON add_entity.tag_categories = subquery.tag_categories
  AND add_entity.count_entity = subquery.max_count_entity
)
*/

-- This CTE: Calculations to find dates of first & most recent mailing sent by issue tag.
, isolate_dates AS (
SELECT DISTINCT
  tag_categories
  , FIRST_VALUE (mailing_date IGNORE NULLS) OVER (PARTITION BY tag_categories ORDER BY mailing_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_mailer_sent_date
  , LAST_VALUE (mailing_date IGNORE NULLS) OVER (PARTITION BY tag_categories ORDER BY mailing_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS most_recent_mailer_sent_date
FROM base
)


-- This CTE: Aggregate calculations by issue tag.
, calc_metrics AS (
SELECT 
	tag_categories
  , COUNT(DISTINCT mailing_id) AS number_mailers
  , SUM (mailing_send_count) AS emails_sent_out
  , SUM(total) AS dollars_donated
  , COUNT(transaction_id) AS count_donations
  , COUNT(first_onetime_donation) AS count_first_onetime_donation
  , COUNT(first_recurring_donation) AS count_first_recurring_donation
FROM base

GROUP BY 1
)


SELECT
  calc_metrics.*
  , first_mailer_sent_date
  , most_recent_mailer_sent_date
FROM calc_metrics
LEFT JOIN isolate_dates 
  ON calc_metrics.tag_categories = isolate_dates.tag_categories