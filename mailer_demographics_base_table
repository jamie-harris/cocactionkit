/* */

--DROP TABLE IF EXISTS coc_reporting. ;
--CREATE TABLE coc_reporting. AS


/* */
WITH base AS (
  SELECT
    core_mailing.id AS mailing_id
    , TO_DATE(core_mailing.finished_at, 'YYYY-MM-DD') AS mailing_date 
      -- ^ finished_at has the best coverage of dates for mailers
    , SUBSTRING(core_tag.name, 6, (LEN(core_tag.name) - 5)) AS campaigner
      -- ^ format field to remove 'OWNER' from the beginning 
    , campaigners_2021.team AS campaign_team
    , core_usermailing.user_id
    --, core_user.subscription_status
  FROM coc_ak.core_mailing
  LEFT JOIN coc_ak.core_mailing_tags
    ON core_mailing.id = core_mailing_tags.mailing_id
  LEFT JOIN coc_ak.core_tag
  	ON core_mailing_tags.tag_id = core_tag.id
  LEFT JOIN coc_ak.core_usermailing
    ON core_mailing.id = core_usermailing.mailing_id
  --LEFT JOIN coc_ak.core_user
    --ON core_usermailing.user_id = core_user.id
  LEFT JOIN coc_reporting.campaigners_2021
    ON core_tag.id = campaigners_2021.tag_id
  WHERE core_tag.name LIKE 'OWNER%' 
      -- ^ In AK, seeing some campaigners are using the format 'Owner...'. Meaning they will not show up in this table.
    AND core_mailing.expected_send_count > 0
    AND core_usermailing.user_id IS NOT NULL 
      -- ^ seeing some mailers that are sent once w/o user id. I'm guessing they're tests
    AND core_mailing.status = 'completed'
    AND mailing_date > '2020-01-01'


ORDER BY mailing_date DESC LIMIT 1000


)


/*Flag whether a user has opened a mailing. Row number field to dedup in the final select.*/
, opens AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_open.user_id IS NOT NULL THEN 1 ELSE NULL END AS open_flag
    , ROW_NUMBER () OVER (PARTITION BY core_open.user_id, core_open.mailing_id ORDER BY core_open.created_at DESC) AS rank_opens
  FROM base
  INNER JOIN coc_ak.core_open -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id = core_open.mailing_id
    AND base.user_id = core_open.user_id
)


/*Flag whether a user has clicked a link from a mailing. Row number field to dedup in the final select.*/
/*, clicks AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_click.user_id IS NOT NULL THEN 1 ELSE NULL END AS click_flag
    , ROW_NUMBER () OVER (PARTITION BY core_click.user_id, core_click.mailing_id  ORDER BY core_click.created_at DESC) AS rank_clicks
  FROM base
  INNER JOIN coc_ak.core_click -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id = core_click.mailing_id
    AND base.user_id = core_click.user_id
  LEFT JOIN coc_ak.core_clickurl
    ON core_click.clickurl_id = core_clickurl.id
  WHERE core_clickurl.url NOT LIKE '%unsubscribe%' -- Exclude clicks that were to unsubscribe
)*/


/*Flag whether a user took an action from a mailing. The code is based on how AK determined non-unsub actions.
Row number field to dedup in the final select.*/
, actions AS (
  SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN core_action.user_id IS NOT NULL THEN 1 ELSE NULL END AS action_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_actions
  FROM base
  INNER JOIN coc_ak.core_action -- Inner join, since I will be joining back to the base in the final select.
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  LEFT JOIN coc_ak.core_unsubscribeaction
    ON core_unsubscribeaction.action_ptr_id = core_action.id
  WHERE action_ptr_id IS NULL -- Filter out actions that are unsubs.
    AND core_action.status = 'complete'
)


/*Flag whether a user unsubbed from a mailing, including if the email bounced. 
The code is based on how AK determined unsubs. Row number field to dedup in the final select.*/
/*, unsubs AS(
SELECT
    base.user_id
    , base.mailing_id
    , CASE WHEN base.user_id IS NOT NULL THEN 1 ELSE NULL END AS unsubscribe_flag
    , ROW_NUMBER () OVER (PARTITION BY core_action.user_id, core_action.mailing_id  ORDER BY core_action.updated_at DESC) AS rank_unsubs
  FROM base
  INNER JOIN coc_ak.core_action -- Inner joins, since I will be joining back to the base in the final select.
    ON base.mailing_id  = core_action.mailing_id
    AND base.user_id = core_action.user_id
  INNER JOIN coc_ak.core_unsubscribeaction
    ON core_unsubscribeaction.action_ptr_id = core_action.id
  INNER JOIN coc_ak.core_subscriptionhistory
    ON core_subscriptionhistory.action_id = core_action.id
)*/


, mailer_engage AS (
SELECT
  base.*
  --, unsubs.unsubscribe_flag 
  , opens.open_flag
  --, clicks.click_flag
  , actions.action_flag
FROM base
LEFT JOIN opens
  ON base.mailing_id = opens.mailing_id
  AND base.user_id = opens.user_id
  AND rank_opens = 1 -- Deduping by user
/*LEFT JOIN clicks
  ON base.mailing_id = clicks.mailing_id
  AND base.user_id = clicks.user_id
  AND rank_clicks = 1 -- Deduping by user*/
LEFT JOIN actions
  ON base.mailing_id = actions.mailing_id
  AND base.user_id = actions.user_id
  AND rank_actions = 1 -- Deduping by user
/*LEFT JOIN unsubs
  ON base.mailing_id = unsubs.mailing_id
  AND base.user_id = unsubs.user_id
  AND rank_unsubs = 1 -- Deduping by user*/
) 

/* This CTE looks at All members who received a mailer. Per mailer, it groups members into age buckets and calculates
the percentage of members in each bucket. */
--, AS age_all (
SELECT
  temp.mailing_id
  , 'All' AS engagement
  , demographic
  , categories
  , value::decimal(8,2) * 100 / count_all::decimal(8,2) AS pct
    -- ^ Calculates the percentage of people per mailer who are in this age bracket, rather than the raw number.
    -- ^ Formatting to calculate decimal places in the percentage
FROM (
  /* This subquery formats the age of members into buckets. */
  SELECT
    mailer_engage.mailing_id
    , 'age' AS demographic
    , CASE 
        WHEN dems.age < 25 THEN '18-24'
        WHEN dems.age >= 25 AND dems.age < 35 THEN '25-34'
        WHEN dems.age >= 35 AND dems.age < 50 THEN '35-49'
        WHEN dems.age >= 50  THEN '50+'
      END AS categories
    , COUNT(mailer_engage.user_id) AS value
  FROM mailer_engage
  INNER JOIN coc_reporting.ak_vf_member_demographics AS dems
    ON mailer_engage.user_id = dems.ak_userid
    AND dems.age IS NOT NULL
       -- ^ Only include members who have an age in the voter file.
  GROUP BY 1,2,3
  ) AS temp
LEFT JOIN (
  /* This subquery gets the total number of people for each mailer. This is used in the parents CTE to calculate 
  percentage. */
  SELECT
    mailing_id
    , COUNT(user_id) AS count_all
  FROM mailer_engage
  INNER JOIN coc_reporting.ak_vf_member_demographics AS dems
    ON mailer_engage.user_id = dems.ak_userid
    AND dems.age IS NOT NULL
      -- ^ Only include members who have an age in the voter file.
  GROUP BY 1
  ) AS mail_sum
  ON mail_sum.mailing_id = temp.mailing_id
--)